// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire Pwm_0;
wire Pwm_1;
wire Pwm_2;
assign GPIO[0] = Pwm_0;
assign GPIO[2] = Pwm_1;
assign GPIO[4] = Pwm_2;
assign GPIO[6] = Pwm_3;
`define DUR_CLOCK_NUM ( 50000000/50)    
wire [11:0] out [3:0];

wire [10:0] res;

	ADC_contr u0 (
		.CLOCK (ADC_CLK_10), //      clk.clk
		.RESET (0), //    reset.reset
		.CH0   (out[0]),   // readings.CH0
		.CH1   (out[1]),   //         .CH1
		.CH2   (0),   //         .CH2
		.CH3   (0),   //         .CH3
		.CH4   (0),   //         .CH4
		.CH5   (0),   //         .CH5
		.CH6   (0),   //         .CH6
		.CH7   (0)    //         .CH7
	);


wire [31:0] PwmAngle_0;
UI h0(

  .iClk  ( MAX10_CLK1_50 ),
  .iSW   ( SW[1:0] ),
  .iAngle(out[0]),
  .PwmOut( PwmAngle_0  )

);


PWM_Geneator p0(
	.clk      ( MAX10_CLK1_50 ),
	.high_dur ( PwmAngle_0       ),
	.total_dur( `DUR_CLOCK_NUM ),
	.PWM      ( Pwm_0 )
);

wire [31:0] PwmAngle_2;
UI h2(

  .iClk  ( MAX10_CLK1_50 ),
  .iSW   ( SW[1:0] ),
  .iAngle(out[1]),
  .PwmOut( PwmAngle_2  )

);


PWM_Geneator p2(
	.clk      ( MAX10_CLK1_50 ),
	.high_dur ( PwmAngle_2       ),
	.total_dur( `DUR_CLOCK_NUM ),
	.PWM      ( Pwm_2 )
);


//=======================================================
//  Structural coding
//=======================================================
wire	        dly_rst;
wire	        spi_clk, spi_clk_out;
wire	[15:0]  data_x;
reset_delay	u_reset_delay	(	
            .iRSTN(KEY[0]),
            .iCLK(MAX10_CLK1_50),
            .oRST(dly_rst));

//  PLL            
spi_pll     u_spi_pll	(
            .areset(dly_rst),
            .inclk0(MAX10_CLK1_50),
            .c0(spi_clk),      // 2MHz
            .c1(spi_clk_out)); // 2MHz phase shift 

//  Initial Setting and Data Read Back
spi_ee_config u_spi_ee_config (			
						.iRSTN(!dly_rst),															
						.iSPI_CLK(spi_clk),								
						.iSPI_CLK_OUT(spi_clk_out),								
						.iG_INT2(GSENSOR_INT[1]),            
						.oDATA_L(data_x[7:0]),
						.oDATA_H(data_x[15:8]),
						.SPI_SDIO(GSENSOR_SDI),
						.oSPI_CSN(GSENSOR_CS_N),
						.oSPI_CLK(GSENSOR_SCLK));
wire [31:0] PwmAngle_1;
UI h1(

  .iClk  ( MAX10_CLK1_50 ),
  .iSW   ( SW[1:0] ),
  .iAngle(data_x[11:0]),
  .PwmOut( PwmAngle_1  )

);


PWM_Geneator p1(
	.clk      ( MAX10_CLK1_50 ),
	.high_dur ( PwmAngle_1       ),
	.total_dur( `DUR_CLOCK_NUM ),
	.PWM      ( Pwm_1 )
);

wire [10:0] toButton;

Grab gr(KEY[0], toButton);

wire [31:0] PwmAngle_3;
UI h3(

  .iClk  ( MAX10_CLK1_50 ),
  .iSW   ( SW[1:0] ),
  .iAngle(toButton),
  .PwmOut( PwmAngle_3   )

);
PWM_Geneator p3(
	.clk      ( MAX10_CLK1_50 ),
	.high_dur ( PwmAngle_3       ),
	.total_dur( `DUR_CLOCK_NUM ),
	.PWM      ( Pwm_3 )
);
endmodule


module Grab(Button, outAngle);
input Button;
output outAngle;
reg [9:0] outAngle;
reg state = 0;


always @(posedge Button)
begin
state = ~state;
if(state)
	outAngle<=10'd1023;
else
	outAngle<=10'd0;
end
endmodule